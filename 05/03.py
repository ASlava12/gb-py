"""
3. Есть два списка:
tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей', 
    'Дмитрий', 'Борис', 'Елена'
]
klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]
Необходимо реализовать генератор, возвращающий кортежи вида 
    (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
...
Количество генерируемых кортежей не должно быть больше длины списка tutors. 
Если в списке klasses меньше элементов, чем в списке tutors, 
    необходимо вывести последние кортежи в виде: (<tutor>, None), например:
('Станислав', None)

### Доказать, что вы создали именно генератор. 
 Проверить его работу вплоть до истощения. 
 Подумать, в каких ситуациях генератор даст эффект. 
"""

tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей', 
    'Дмитрий', 'Борис', 'Елена'
]
klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]

gen = (
    (tutors[i], klasses[i]) if len(klasses)>i else (tutors[i], None) 
    for i in range(len(tutors)) 
)

print(f"gen - это генератор, док-во type(gen): {type(gen)}")

print("Вывод генератора:")
try:
    while True:
        print(next(gen))
except StopIteration:
    print('done')

"""
>  Подумать, в каких ситуациях генератор даст эффект. 
Не понятен вопрос. Возможно речь о задачах (привести кейсы), которые может решать генератор? 

Если да - то получение значений из базы данных, в таблице которой храиться множество записей.
Пример: 
def gen(...):
    for page in table_pages:
        for row in sql_result:
            ...
            yield ...

Тем самым, мы не насилуем сервер дикими запросами, которые забьют память серверу, а также, экономим память клиента.
"""