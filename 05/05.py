"""
5. Подумайте, как можно сделать оптимизацию кода по памяти, по скорости.
Представлен список чисел. Определить элементы списка, не имеющие повторений.
 Сформировать из этих элементов список с сохранением порядка их следования 
    в исходном списке, например:
src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result = [23, 1, 3, 10, 4, 11]
Подсказка: напишите сначала решение «в лоб». 
  Потом подумайте об оптимизации.
"""

src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

# Подсчитать количество каждого вхождения элемента
entry_count = dict()
for x in src:
    if x in entry_count:
        entry_count[x] += 1
    else:
        entry_count[x] = 1

# Выводим элементы, не имеющие повторения
result = [x for x in src if entry_count[x] == 1]

print(result == [23, 1, 3, 10, 4, 11])

# Другой вариант

from collections import Counter

entry_count_another = Counter(src)
result_another = [x for x in src if entry_count_another[x] == 1]

print(result_another == [23, 1, 3, 10, 4, 11])